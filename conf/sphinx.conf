source forum_search
{
        type                                    = mysql

        sql_host                                = 127.0.0.1
        sql_user                                = icom
        sql_pass                                = some_password
        sql_db                                  = icom
        sql_port                                = 3306  # optional, default is 3306
        sql_sock                                = /var/run/mysqld/mysqld.sock

        sql_query_pre                   = SET NAMES utf8
        sql_query_pre                   = SET SESSION query_cache_type=OFF
        sql_query_pre                   = REPLACE INTO sph_counter SELECT 'forum_search', MAX(a.post_id) FROM forum_posts a

        sql_query_range                                 = SELECT 1, MAX(post_id) FROM forum_posts
        sql_range_step                                  = 1024

        sql_query =\
                SELECT\
                        a.post_id id,\
                        a.post_id,\
                        a.thread_id,\
                        b.section_id,\
                        a.user_id,\
                        b.lang_de,\
                        b.lang_en,\
                        a.name,\
                        a.content,\
                        b.num_hits,\
                        UNIX_TIMESTAMP(a.timeadded) timeadded\
                FROM forum_posts a\
                JOIN forum_threads b USING (thread_id)\
                WHERE a.post_id>=$start AND a.post_id<=$end;

        sql_attr_uint = post_id
        sql_attr_uint = thread_id
        sql_attr_uint = section_id
        sql_attr_uint = user_id
        sql_attr_uint = lang_de
        sql_attr_uint = lang_en
        sql_attr_uint = num_hits
        sql_attr_timestamp = timeadded
}
source forum_search_delta : forum_search
{
        sql_query_pre                   = SET NAMES utf8
        sql_query_pre                   = SET SESSION query_cache_type=OFF
        sql_query =\
                SELECT\
                        a.post_id id,\
                        a.post_id,\
                        a.thread_id,\
                        b.section_id,\
                        a.user_id,\
                        b.lang_de,\
                        b.lang_en,\
                        a.name,\
                        a.content,\
                        b.num_hits,\
                        UNIX_TIMESTAMP(a.timeadded) timeadded\
                FROM forum_posts a\
                JOIN forum_threads b USING (thread_id)\
                WHERE a.post_id>(SELECT sc.v FROM sph_counter sc WHERE sc.n='forum_search') AND a.post_id>=$start AND a.post_id<=$end;
}
index forum_search
{
        source                  = forum_search
        path                    = /var/lib/sphinxsearch/data/forum_search
        docinfo                 = extern
        charset_type            = utf-8
        #morphology             = none
        morphology              = libstemmer_de, stem_en
        min_infix_len           = 2
        enable_star             = 1
        infix_fields            = name, content
}
index forum_search_delta : forum_search
{
        source                  = forum_search_delta
        path                    = /var/lib/sphinxsearch/data/forum_search_delta
}





indexer
{
        # memory limit, in bytes, kiloytes (16384K) or megabytes (256M)
        # optional, default is 32M, max is 2047M, recommended is 256M to 1024M
        mem_limit                       = 256M

        # maximum IO calls per second (for I/O throttling)
        # optional, default is 0 (unlimited)
        # max_iops                      = 40

        # maximum IO call size, bytes (for I/O throttling)
        # optional, default is 0 (unlimited)
        # max_iosize            = 1048576

        # write buffer size, bytes
        # several (currently up to 4) buffers will be allocated
        # write buffers are allocated in addition to mem_limit
        # optional, default is 1M
        # write_buffer          = 1M
}



searchd
{
        # hostname, port, or hostname:port, or /unix/socket/path to listen on
        # multi-value, multiple listen points are allowed
        # optional, default is 0.0.0.0:9312 (listen on all interfaces, port 9312)
        #
        #listen                                  = 0.0.0.0:9312
        listen                                  = 127.0.0.1:9312
        # listen                                = 192.168.0.1:9312
        # listen                                = 9312
        listen                                  = /var/run/sphinxsearch/searchd.sock:mysql41
        listen                                  = 127.0.0.1:9306:mysql41


        # log file, searchd run info is logged here
        # optional, default is 'searchd.log'
        log                                     = /var/log/sphinxsearch/searchd.log

        # query log file, all search queries are logged here
        # optional, default is empty (do not log queries)
        #query_log                      = /var/log/sphinxsearch/query.log

        # client read timeout, seconds
        # optional, default is 5
        read_timeout            = 5

        # request timeout, seconds
        # optional, default is 5 minutes
        client_timeout          = 300

        # maximum amount of children to fork (concurrent searches to run)
        # optional, default is 0 (unlimited)
        workers                 = prefork
        max_children            = 100

        # PID file, searchd process ID file name
        # mandatory
        pid_file                        = /var/run/sphinxsearch/searchd.pid

        # max amount of matches the daemon ever keeps in RAM, per-index
        # WARNING, THERE'S ALSO PER-QUERY LIMIT, SEE SetLimits() API CALL
        # default is 1000 (just like Google)
        max_matches                     = 2000

        # seamless rotate, prevents rotate stalls if precaching huge datasets
        # optional, default is 1
        seamless_rotate         = 1

        # whether to forcibly preopen all indexes on startup
        # optional, default is 0 (do not preopen)
        preopen_indexes         = 1

        # whether to unlink .old index copies on succesful rotation.
        # optional, default is 1 (do unlink)
        unlink_old                      = 1

        # attribute updates periodic flush timeout, seconds
        # updates will be automatically dumped to disk this frequently
        # optional, default is 0 (disable periodic flush)
        # attr_flush_period     = 900


        # instance-wide ondisk_dict defaults (per-index value take precedence)
        # optional, default is 0 (precache all dictionaries in RAM)
        # ondisk_dict_default   = 1


        # MVA updates pool size
        # shared between all instances of searchd, disables attr flushes!
        # optional, default size is 1M
        mva_updates_pool        = 1M

        # max allowed network packet size
        # limits both query packets from clients, and responses from agents
        # optional, default size is 8M
        max_packet_size         = 8M

        # crash log path
        # searchd will (try to) log crashed query to 'crash_log_path.PID' file
        # optional, default is empty (do not create crash logs)
        # crash_log_path                = /var/log/sphinxsearch/crash


        # max allowed per-query filter count
        # optional, default is 256
        max_filters                     = 256

        # max allowed per-filter values count
        # optional, default is 4096
        max_filter_values       = 4096


        # socket listen queue length
        # optional, default is 5
        #
        # listen_backlog                = 5


        # per-keyword read buffer size
        # optional, default is 256K
        #
        # read_buffer                   = 256K


        # unhinted read size (currently used when reading hits)
        # optional, default is 32K
        #
        # read_unhinted         = 32K
}
